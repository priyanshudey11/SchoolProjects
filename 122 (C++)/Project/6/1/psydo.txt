// Define constants for characters used in the program
const char BLANK = 'B';
const char ZERO = '0';
const char ONE = '1';
const char STAR = '*';
const char LEFT = 'L';
const char RIGHT = 'R';

// Define the maximum tape size and maximum number of states
const int MAXTAPE = 100;
const int MAXSTATES = 25;

// Define the starting position of the tape and starting state
const short STARTPOS = 40;
const char STARTSTATE = '0';

// Define the state transition structure
struct stateTrans {
    char state;
    char readChar;
    char nextState;
    char writeChar;
    char move;
};

// Define the state transition table
stateTrans delta[MAXSTATES][2];

// Main function
int main()
{
    char tape[MAXTAPE];
    char state = STARTSTATE;
    short pos = STARTPOS;
    int length = 0;

    // Initialize the tape with blanks
    for (int i = 0; i < MAXTAPE; i++) {
        tape[i] = BLANK;
    }

    // Read input string
    string input;
    cout << "Enter input string: ";
    cin >> input;
    length = input.length();
    for (int i = 0; i < length; i++) {
        tape[STARTPOS + i] = input[i];
    }

    // Initialize the state transition table
    for (int i = 0; i < MAXSTATES; i++) {
        for (int j = 0; j < 2; j++) {
            delta[i][j].state = -1;
            delta[i][j].readChar = -1;
            delta[i][j].nextState = -1;
            delta[i][j].writeChar = -1;
            delta[i][j].move = -1;
        }
    }

    // Define state transitions for validating strings of alternating 0s and 1s
    delta[0][0].state = '0';
    delta[0][0].readChar = '0';
    delta[0][0].nextState = '1';
    delta[0][0].writeChar = '0';
    delta[0][0].move = RIGHT;

    delta[0][1].state = '0';
    delta[0][1].readChar = '1';
    delta[0][1].nextState = '2';
    delta[0][1].writeChar = '1';
    delta[0][1].move = RIGHT;

    delta[1][0].state = '1';
    delta[1][0].readChar = '1';
    delta[1][0].nextState = '0';
    delta[1][0].writeChar = '1';
    delta[1][0].move = RIGHT;

    delta[1][1].state = '1';
    delta[1][1].readChar = '0';
    delta[1][1].nextState = '2';
    delta[1][1].writeChar = '0';
    delta[1][1].move = RIGHT;

    delta[2][0].state = '2';
    delta[2][0].readChar = '1';
    delta[2][0].nextState = '1';
    delta[2][0].writeChar = '1';
    delta[2][0].move = RIGHT;

    delta[2][1].state = '2';
    delta[2][1].readChar = '0';
    delta[2][1].nextState = HALT_STATE;
   delta[2][1].writeChar = '0';
   delta[2][1].move = LEFT;
// Define the current state and current position of the tape
char currentState = STARTSTATE;
short currentPos = STARTPOS;

// Run the simulation
while(currentState != HALT_STATE) 
{
    // Find the transition rule for the current state and read symbol
    stateTrans currentTrans;
    bool foundTrans = false;
    for (int i = 0; i < 3; i++) 
    {
        if (delta[currentState-'0'][i].readChar == tape[currentPos]) 
        {
            currentTrans = delta[currentState-'0'][i];
            foundTrans = true;
            break;
        }
    }

    if (!foundTrans) 
    {
        printf("Execution error: no transition found for state %c and symbol %c\n", currentState, tape[currentPos]);
        break;
    }

    // Apply the transition rule
    tape[currentPos] = currentTrans.writeChar;
    if (currentTrans.move == LEFT) {
        currentPos--;
    } else {
        currentPos++;
    }
    currentState = currentTrans.nextState;

    // Check for out of bounds
    if (currentPos < 0 || currentPos >= MAXTAPE) {
        printf("Execution error: Out of bounds\n");
        printTape(tape, MAXTAPE, currentPos);
        break;
    }
}

// Print the final tape contents
printTape(tape, MAXTAPE, currentPos);

return 0;
}
   
